// Utility function to properly render emojis including flags
export const renderEmojis = (text) => {
  if (!text) return text;

  // Convert Unicode escape sequences to actual emojis
  let processedText = text.replace(/\\u[\dA-F]{4}/gi, (match) => {
    return String.fromCharCode(parseInt(match.replace(/\\u/g, ""), 16));
  });

  // Handle flag emojis specifically - convert country codes to flags
  processedText = processedText.replace(
    /ğŸ‡®ğŸ‡±|\\uD83C\\uDDEE\\uD83C\\uDDF1/g,
    "ğŸ‡®ğŸ‡±"
  );
  processedText = processedText.replace(
    /ğŸ‡ºğŸ‡¸|\\uD83C\\uDDFA\\uD83C\\uDDF8/g,
    "ğŸ‡ºğŸ‡¸"
  );
  processedText = processedText.replace(
    /ğŸ‡¬ğŸ‡§|\\uD83C\\uDDEC\\uD83C\\uDDE7/g,
    "ğŸ‡¬ğŸ‡§"
  );
  processedText = processedText.replace(
    /ğŸ‡©ğŸ‡ª|\\uD83C\\uDDE9\\uD83C\\uDDEA/g,
    "ğŸ‡©ğŸ‡ª"
  );
  processedText = processedText.replace(
    /ğŸ‡«ğŸ‡·|\\uD83C\\uDDEB\\uD83C\\uDDF7/g,
    "ğŸ‡«ğŸ‡·"
  );
  processedText = processedText.replace(
    /ğŸ‡¯ğŸ‡µ|\\uD83C\\uDDEF\\uD83C\\uDDF5/g,
    "ğŸ‡¯ğŸ‡µ"
  );
  processedText = processedText.replace(
    /ğŸ‡¨ğŸ‡³|\\uD83C\\uDDE8\\uD83C\\uDDF3/g,
    "ğŸ‡¨ğŸ‡³"
  );
  processedText = processedText.replace(
    /ğŸ‡®ğŸ‡³|\\uD83C\\uDDEE\\uD83C\\uDDF3/g,
    "ğŸ‡®ğŸ‡³"
  );
  processedText = processedText.replace(
    /ğŸ‡·ğŸ‡º|\\uD83C\\uDDF7\\uD83C\\uDDFA/g,
    "ğŸ‡·ğŸ‡º"
  );
  processedText = processedText.replace(
    /ğŸ‡§ğŸ‡·|\\uD83C\\uDDE7\\uD83C\\uDDF7/g,
    "ğŸ‡§ğŸ‡·"
  );
  processedText = processedText.replace(
    /ğŸ‡®ğŸ‡¹|\\uD83C\\uDDEE\\uD83C\\uDDF9/g,
    "ğŸ‡®ğŸ‡¹"
  );
  processedText = processedText.replace(
    /ğŸ‡ªğŸ‡¸|\\uD83C\\uDDEA\\uD83C\\uDDF8/g,
    "ğŸ‡ªğŸ‡¸"
  );
  processedText = processedText.replace(
    /ğŸ‡°ğŸ‡·|\\uD83C\\uDDF0\\uD83C\\uDDF7/g,
    "ğŸ‡°ğŸ‡·"
  );
  processedText = processedText.replace(
    /ğŸ‡¨ğŸ‡¦|\\uD83C\\uDDE8\\uD83C\\uDDE6/g,
    "ğŸ‡¨ğŸ‡¦"
  );
  processedText = processedText.replace(
    /ğŸ‡¦ğŸ‡º|\\uD83C\\uDDE6\\uD83C\\uDDFA/g,
    "ğŸ‡¦ğŸ‡º"
  );

  return processedText;
};
